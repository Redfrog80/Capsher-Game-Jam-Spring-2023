print("yeet")

import pygame
import os
import math

# Initialize Pygame
pygame.init()

clock = pygame.time.Clock()
fps = 60

# Set up the display
screen_width = 640
screen_height = 480
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Target Practice")

target_image = pygame.image.load(os.path.join('images', 'gameImage.png'))
bot_image = pygame.image.load(os.path.join('images', 'amogus.png'))

initial_player_x = 0
initial_player_y = 0

player_x = screen_width / 2 + initial_player_x # initializes player location
player_y = screen_height / 2 + initial_player_y

initial_x = 100
initial_y = 100 # change these as needed, when bots spawn this should be random

bot_speed_x = 0
bot_speed_y = 0

bot_accel_x = 0.5
bot_accel_y = 0.5 # this is a coefficient

max_speed_x = 10
max_speed_y = 10

bot_x = screen_width / 2 + initial_x
bot_y = screen_height / 2 + initial_y

speed_multiplier = 1 # changes overall speed of the bot after acceleration
damp_factor = 0.1 # changes how quickly a bot slows down when not actively moving in any given axis

max_follow_distance = 500 # makes sure the player isnt swarmed by bots off-sceen

# Main game loop
running = True
while running:
    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    player_x, player_y = pygame.mouse.get_pos() # makes bot follow mouse
    dir_x = player_x - bot_x
    dir_y = player_y - bot_y # make a vector from the bot to the player
    
    
    dir_length = max(1, math.sqrt(dir_x ** 2 + dir_y ** 2))
    dir_x /= dir_length
    dir_y /= dir_length # normalizes vector

    ####################################################
    # movement
    if dir_length < max_follow_distance:
        if dir_x < 0:
            bot_speed_x -= bot_accel_x
            if bot_speed_x < -max_speed_x:
                bot_speed_x = -max_speed_x
        elif dir_x > 0:
            bot_speed_x += bot_accel_x
            if bot_speed_x > max_speed_x:
                bot_speed_x = max_speed_x
        else:
            if bot_speed_x > 0:
                bot_speed_x -= bot_accel_x * damp_factor
            elif bot_speed_x < 0:
                bot_speed_x += bot_accel_x * damp_factor

    if dir_length < max_follow_distance:
        if dir_y < 0:
            bot_speed_y -= bot_accel_y
            if bot_speed_y < -max_speed_y:
                bot_speed_y = -max_speed_y
        elif dir_y > 0:
            bot_speed_y += bot_accel_y
            if bot_speed_y > max_speed_y:
                bot_speed_y = max_speed_y
        else:
            if bot_speed_y > 0:
                bot_speed_y -= bot_accel_y * damp_factor
            elif bot_speed_y < 0:
                bot_speed_y += bot_accel_y * damp_factor
        
    bot_x += bot_speed_x * speed_multiplier
    bot_y += bot_speed_y * speed_multiplier # moves bot

    ####################################################
    
    screen.fill((255, 255, 255))
    screen.blit(bot_image, (bot_x - bot_image.get_width() / 2, bot_y - bot_image.get_height() / 2))
    pygame.display.flip()
    
    clock.tick(fps) # limit FPS


pygame.quit()